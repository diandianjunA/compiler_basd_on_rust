ASSUME CS:CODE, DS:DATA, SS:STACK 
 DATA SEGMENT
   global DW 0
   DW 0
   DW 0
   DW 0
   DW 0
   DW 0
   DW 0
   DW 0
   DW 0
 DATA ENDS
 STACK SEGMENT
  DW 200 DUP(0)
 STACK ENDS
 CODE SEGMENT
  MOV AX, DATA
  MOV DS, AX
  MOV AX, 2
  MOV WORD PTR DS:[0], AX
  MOV AX, 1
  MOV WORD PTR DS:[0], AX
  MOV AX, WORD PTR SS:[BP - 0]
  MOV WORD PTR DS:[0], AX
MAIN:
  MOV AX, 1
  MOV WORD PTR SS:[BP - 0], AX
  MOV AX, 2
  MOV WORD PTR SS:[BP - 2], AX
  MOV AX, 3
  MOV WORD PTR SS:[BP - 4], AX
  MOV AX, 10
  MOV WORD PTR SS:[BP - 8], AX
  MOV AX, 20
  MOV WORD PTR SS:[BP - 10], AX
  MOV AX, 30
  MOV WORD PTR SS:[BP - 12], AX
  MOV AX, 0
  MOV WORD PTR SS:[BP - 16], AX
  MOV AX, 15
  MOV WORD PTR SS:[BP - 18], AX
L9:
  MOV AX, WORD PTR SS:[BP - 2]
  MOV BX, 1
  CMP AX, BX
  PUSHF
  POP AX
  TEST AX, 0040H
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 42], AX
  MOV AX, WORD PTR SS:[BP - 42]
  CMP AX, 0
  JNE L10
  MOV AX, WORD PTR SS:[BP - 10]
  MOV WORD PTR DS:[2], AX
  CALL FAR PTR sum
  MOV WORD PTR SS:[BP - 44], AX
  JMP L8
L10:
  MOV AX, WORD PTR SS:[BP - 2]
  MOV BX, 2
  CMP AX, BX
  PUSHF
  POP AX
  TEST AX, 0040H
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 46], AX
  MOV AX, WORD PTR SS:[BP - 46]
  CMP AX, 0
  JNE L11
  MOV AX, WORD PTR SS:[BP - 12]
  MOV WORD PTR DS:[2], AX
  CALL FAR PTR fact
  MOV WORD PTR SS:[BP - 48], AX
  JMP L8
  JMP L11
L11:
  MOV AX, 10
  MOV WORD PTR SS:[BP - 18], AX
  JMP L8
L8:
  MOV AX, 0
  MOV WORD PTR SS:[BP - 16], AX
L12:
  MOV AX, WORD PTR SS:[BP - 16]
  MOV BX, WORD PTR SS:[BP - 18]
  CMP AX, BX
  PUSHF
  POP AX
  AND AX, 0001H
  MOV WORD PTR SS:[BP - 50], AX
  MOV AX, WORD PTR SS:[BP - 50]
  CMP AX, 0
  JNE L13
  MOV AX, WORD PTR SS:[BP - 16]
  MOV WORD PTR DS:[2], AX
  CALL FAR PTR do_while
  MOV WORD PTR SS:[BP - 52], AX
  MOV AX, WORD PTR SS:[BP - 16]
  MOV BX, 1
  ADD AX, BX
  MOV WORD PTR SS:[BP - 54], AX
  MOV AX, WORD PTR SS:[BP - 54]
  MOV WORD PTR SS:[BP - 16], AX
  JMP L12
L13:
  MOV AX, 72
  MOV WORD PTR SS:[BP - 20], AX
  MOV AX, 101
  MOV WORD PTR SS:[BP - 22], AX
  MOV AX, 108
  MOV WORD PTR SS:[BP - 24], AX
  MOV AX, 108
  MOV WORD PTR SS:[BP - 26], AX
  MOV AX, 111
  MOV WORD PTR SS:[BP - 28], AX
  MOV AX, !
  MOV WORD PTR SS:[BP - 28], AX
  MOV AX, 4C00H
  INT 21H

sum PROC FAR
  PUSH BP
  MOV BP, SP
  MOV AX, WORD PTR DS:[2]
  MOV WORD PTR SS:[BP - 0], AX
  MOV AX, 0
  MOV WORD PTR SS:[BP - 2], AX
L0:
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 0
  CMP AX, BX
  PUSHF
  POP AX
  TEST AX, 0041H
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 4], AX
  MOV AX, WORD PTR SS:[BP - 4]
  CMP AX, 0
  JNE L1
  MOV AX, WORD PTR SS:[BP - 2]
  MOV BX, WORD PTR SS:[BP - 0]
  ADD AX, BX
  MOV WORD PTR SS:[BP - 6], AX
  MOV AX, WORD PTR SS:[BP - 6]
  MOV WORD PTR SS:[BP - 2], AX
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 1
  SUB AX, BX
  MOV WORD PTR SS:[BP - 8], AX
  MOV AX, WORD PTR SS:[BP - 8]
  MOV WORD PTR SS:[BP - 0], AX
  JMP L0
L1:
  MOV SP, BP
  POP BP
  RET
sum ENDP

fact PROC FAR
  PUSH BP
  MOV BP, SP
  MOV AX, WORD PTR DS:[2]
  MOV WORD PTR SS:[BP - 0], AX
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 0
  CMP AX, BX
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 2], AX
  MOV AX, WORD PTR SS:[BP - 2]
  CMP AX, 0
  JNE L2
  MOV SP, BP
  POP BP
  RET
fact ENDP

do_while PROC FAR
  PUSH BP
  MOV BP, SP
  MOV AX, WORD PTR DS:[2]
  MOV WORD PTR SS:[BP - 0], AX
  MOV AX, 0
  MOV WORD PTR SS:[BP - 2], AX
L4:
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 5
  CMP AX, BX
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 4], AX
  MOV AX, WORD PTR SS:[BP - 4]
  CMP AX, 0
  JNE L6
  JMP L4
  JMP L7
L6:
L7:
  MOV AX, WORD PTR SS:[BP - 2]
  MOV BX, WORD PTR SS:[BP - 0]
  ADD AX, BX
  MOV WORD PTR SS:[BP - 6], AX
  MOV AX, WORD PTR SS:[BP - 6]
  MOV WORD PTR SS:[BP - 2], AX
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 1
  SUB AX, BX
  MOV WORD PTR SS:[BP - 8], AX
  MOV AX, WORD PTR SS:[BP - 8]
  MOV WORD PTR SS:[BP - 0], AX
  MOV AX, WORD PTR SS:[BP - 0]
  MOV BX, 0
  CMP AX, BX
  PUSHF
  POP AX
  TEST AX, 0041H
  PUSHF
  POP AX
  AND AX, 0040H
  MOV WORD PTR SS:[BP - 10], AX
  MOV AX, WORD PTR SS:[BP - 10]
  CMP AX, 0
  JNE L5
  JMP L4
L5:
  MOV SP, BP
  POP BP
  RET
do_while ENDP
 CODE ENDS
END