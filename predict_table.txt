PredictTable {
    table: {
        "while_stmt": {
            "While": [
                "while_stmt->While LeftParen expression RightParen compound_stmt SemiColon",
            ],
        },
        "var_stmt": {
            "MinusMinus": [
                "var_stmt->self_op",
            ],
            "PlusPlus": [
                "var_stmt->self_op",
            ],
            "Equals": [
                "var_stmt->Equals expression",
            ],
        },
        "term": {
            "Integer(i64)": [
                "term->factor term'",
            ],
            "LeftParen": [
                "term->factor term'",
            ],
            "FloatNumber(f64)": [
                "term->factor term'",
            ],
            "Identifier": [
                "term->factor term'",
            ],
            "True": [
                "term->factor term'",
            ],
            "False": [
                "term->factor term'",
            ],
            "String(String)": [
                "term->factor term'",
            ],
            "Character(char)": [
                "term->factor term'",
            ],
        },
        "for_stmt": {
            "For": [
                "for_stmt->For LeftParen for_expression RightParen compound_stmt SemiColon",
            ],
        },
        "arg_list": {
            "True": [
                "arg_list->expression arg_list'",
            ],
            "Integer(i64)": [
                "arg_list->expression arg_list'",
            ],
            "Identifier": [
                "arg_list->expression arg_list'",
            ],
            "Character(char)": [
                "arg_list->expression arg_list'",
            ],
            "FloatNumber(f64)": [
                "arg_list->expression arg_list'",
            ],
            "LeftParen": [
                "arg_list->expression arg_list'",
            ],
            "String(String)": [
                "arg_list->expression arg_list'",
            ],
            "False": [
                "arg_list->expression arg_list'",
            ],
        },
        "logical_op": {
            "And": [
                "logical_op->And",
            ],
            "Or": [
                "logical_op->Or",
            ],
            "Not": [
                "logical_op->Not",
            ],
        },
        "additive_expression": {
            "String(String)": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "LeftParen": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "FloatNumber(f64)": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "Integer(i64)": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "Character(char)": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "False": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "True": [
                "additive_expression->simple_expression additive_expression'",
            ],
            "Identifier": [
                "additive_expression->simple_expression additive_expression'",
            ],
        },
        "case_stmt_n": {
            "Case": [
                "case_stmt_n->case_stmt case_stmt_n'",
            ],
        },
        "local_declarations": {
            "Float": [
                "local_declarations->type Identifier var' var_dec_stmt",
            ],
            "Char": [
                "local_declarations->type Identifier var' var_dec_stmt",
            ],
            "Int": [
                "local_declarations->type Identifier var' var_dec_stmt",
            ],
        },
        "additive_expression'": {
            "LessThan": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "BangEquals": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "GreaterThanEquals": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "Comma": [
                "additive_expression'->None",
            ],
            "GreaterThan": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "LessThanEquals": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "EqualsEquals": [
                "additive_expression'->relational_op simple_expression additive_expression'",
            ],
            "Not": [
                "additive_expression'->None",
            ],
            "Colon": [
                "additive_expression'->None",
            ],
            "SemiColon": [
                "additive_expression'->None",
            ],
            "And": [
                "additive_expression'->None",
            ],
            "RightParen": [
                "additive_expression'->None",
            ],
            "Or": [
                "additive_expression'->None",
            ],
            "None": [
                "additive_expression'->None",
            ],
        },
        "simple_expression'": {
            "LessThanEquals": [
                "simple_expression'->None",
            ],
            "GreaterThanEquals": [
                "simple_expression'->None",
            ],
            "LessThan": [
                "simple_expression'->None",
            ],
            "Or": [
                "simple_expression'->None",
            ],
            "And": [
                "simple_expression'->None",
            ],
            "EqualsEquals": [
                "simple_expression'->None",
            ],
            "Minus": [
                "simple_expression'->add_op term simple_expression'",
            ],
            "None": [
                "simple_expression'->None",
            ],
            "Comma": [
                "simple_expression'->None",
            ],
            "GreaterThan": [
                "simple_expression'->None",
            ],
            "Plus": [
                "simple_expression'->add_op term simple_expression'",
            ],
            "Not": [
                "simple_expression'->None",
            ],
            "SemiColon": [
                "simple_expression'->None",
            ],
            "RightParen": [
                "simple_expression'->None",
            ],
            "BangEquals": [
                "simple_expression'->None",
            ],
            "Colon": [
                "simple_expression'->None",
            ],
        },
        "params": {
            "Int": [
                "params->param_list",
            ],
            "Float": [
                "params->param_list",
            ],
            "Char": [
                "params->param_list",
            ],
            "Void": [
                "params->Void",
            ],
        },
        "simple_expression": {
            "False": [
                "simple_expression->term simple_expression'",
            ],
            "LeftParen": [
                "simple_expression->term simple_expression'",
            ],
            "Character(char)": [
                "simple_expression->term simple_expression'",
            ],
            "True": [
                "simple_expression->term simple_expression'",
            ],
            "String(String)": [
                "simple_expression->term simple_expression'",
            ],
            "FloatNumber(f64)": [
                "simple_expression->term simple_expression'",
            ],
            "Integer(i64)": [
                "simple_expression->term simple_expression'",
            ],
            "Identifier": [
                "simple_expression->term simple_expression'",
            ],
        },
        "else_stmt_n": {
            "Do": [
                "else_stmt_n->None",
            ],
            "Float": [
                "else_stmt_n->None",
            ],
            "Int": [
                "else_stmt_n->None",
            ],
            "Break": [
                "else_stmt_n->None",
            ],
            "For": [
                "else_stmt_n->None",
            ],
            "Case": [
                "else_stmt_n->None",
            ],
            "Switch": [
                "else_stmt_n->None",
            ],
            "While": [
                "else_stmt_n->None",
            ],
            "If": [
                "else_stmt_n->None",
            ],
            "Continue": [
                "else_stmt_n->None",
            ],
            "None": [
                "else_stmt_n->None",
            ],
            "CloseBrace": [
                "else_stmt_n->None",
            ],
            "Default": [
                "else_stmt_n->None",
            ],
            "Char": [
                "else_stmt_n->None",
            ],
            "Return": [
                "else_stmt_n->None",
            ],
            "Else": [
                "else_stmt_n->else_stmt",
            ],
            "Identifier": [
                "else_stmt_n->None",
            ],
        },
        "var_or_call_stmt_remain": {
            "LeftParen": [
                "var_or_call_stmt_remain->LeftParen args RightParen",
            ],
            "LeftBracket": [
                "var_or_call_stmt_remain->var' var_stmt",
            ],
            "Equals": [
                "var_or_call_stmt_remain->var' var_stmt",
            ],
            "PlusPlus": [
                "var_or_call_stmt_remain->var' var_stmt",
            ],
            "MinusMinus": [
                "var_or_call_stmt_remain->var' var_stmt",
            ],
        },
        "case_stmt": {
            "Case": [
                "case_stmt->Case expression Colon statement_list",
            ],
        },
        "declaration_list": {
            "Int": [
                "declaration_list->declaration declaration_list'",
            ],
            "Float": [
                "declaration_list->declaration declaration_list'",
            ],
            "Char": [
                "declaration_list->declaration declaration_list'",
            ],
        },
        "arg_list'": {
            "Comma": [
                "arg_list'->Comma expression arg_list'",
            ],
            "RightParen": [
                "arg_list'->None",
            ],
        },
        "mul_op": {
            "Asterisk": [
                "mul_op->Asterisk",
            ],
            "Slash": [
                "mul_op->Slash",
            ],
        },
        "self_op": {
            "PlusPlus": [
                "self_op->PlusPlus",
            ],
            "MinusMinus": [
                "self_op->MinusMinus",
            ],
        },
        "program": {
            "Int": [
                "program->declaration_list",
            ],
            "Char": [
                "program->declaration_list",
            ],
            "Float": [
                "program->declaration_list",
            ],
        },
        "relational_op": {
            "GreaterThan": [
                "relational_op->GreaterThan",
            ],
            "GreaterThanEquals": [
                "relational_op->GreaterThanEquals",
            ],
            "EqualsEquals": [
                "relational_op->EqualsEquals",
            ],
            "BangEquals": [
                "relational_op->BangEquals",
            ],
            "LessThan": [
                "relational_op->LessThan",
            ],
            "LessThanEquals": [
                "relational_op->LessThanEquals",
            ],
        },
        "var_or_call_remain": {
            "Slash": [
                "var_or_call_remain->var'",
            ],
            "EqualsEquals": [
                "var_or_call_remain->var'",
            ],
            "RightParen": [
                "var_or_call_remain->var'",
            ],
            "Not": [
                "var_or_call_remain->var'",
            ],
            "LeftBracket": [
                "var_or_call_remain->var'",
            ],
            "LeftParen": [
                "var_or_call_remain->LeftParen args RightParen",
            ],
            "LessThan": [
                "var_or_call_remain->var'",
            ],
            "GreaterThan": [
                "var_or_call_remain->var'",
            ],
            "SemiColon": [
                "var_or_call_remain->var'",
            ],
            "BangEquals": [
                "var_or_call_remain->var'",
            ],
            "Plus": [
                "var_or_call_remain->var'",
            ],
            "Minus": [
                "var_or_call_remain->var'",
            ],
            "Asterisk": [
                "var_or_call_remain->var'",
            ],
            "Colon": [
                "var_or_call_remain->var'",
            ],
            "None": [
                "var_or_call_remain->var'",
            ],
            "GreaterThanEquals": [
                "var_or_call_remain->var'",
            ],
            "Or": [
                "var_or_call_remain->var'",
            ],
            "Comma": [
                "var_or_call_remain->var'",
            ],
            "LessThanEquals": [
                "var_or_call_remain->var'",
            ],
            "And": [
                "var_or_call_remain->var'",
            ],
        },
        "case_stmt_n'": {
            "Case": [
                "case_stmt_n'->case_stmt_n",
            ],
            "Default": [
                "case_stmt_n'->None",
            ],
            "CloseBrace": [
                "case_stmt_n'->None",
            ],
        },
        "expression_assign": {
            "SemiColon": [
                "expression_assign->None",
            ],
            "Identifier": [
                "expression_assign->var_or_call_stmt",
            ],
            "RightParen": [
                "expression_assign->None",
            ],
        },
        "declaration": {
            "Char": [
                "declaration->type Identifier dec_stmt",
            ],
            "Float": [
                "declaration->type Identifier dec_stmt",
            ],
            "Int": [
                "declaration->type Identifier dec_stmt",
            ],
        },
        "param_list'": {
            "RightParen": [
                "param_list'->None",
            ],
            "Comma": [
                "param_list'->Comma param param_list'",
            ],
        },
        "fun_dec_stmt": {
            "LeftParen": [
                "fun_dec_stmt->LeftParen params RightParen compound_stmt",
            ],
        },
        "param": {
            "Float": [
                "param->type var",
            ],
            "Char": [
                "param->type var",
            ],
            "Int": [
                "param->type var",
            ],
        },
        "else_stmt": {
            "Else": [
                "else_stmt->Else compound_stmt",
            ],
        },
        "value": {
            "String(String)": [
                "value->String(String)",
            ],
            "False": [
                "value->False",
            ],
            "FloatNumber(f64)": [
                "value->FloatNumber(f64)",
            ],
            "Character(char)": [
                "value->Character(char)",
            ],
            "True": [
                "value->True",
            ],
            "Integer(i64)": [
                "value->Integer(i64)",
            ],
        },
        "var_dec_stmt": {
            "SemiColon": [
                "var_dec_stmt->SemiColon",
            ],
            "Equals": [
                "var_dec_stmt->Equals expression SemiColon",
            ],
        },
        "args": {
            "LeftParen": [
                "args->arg_list",
            ],
            "FloatNumber(f64)": [
                "args->arg_list",
            ],
            "Integer(i64)": [
                "args->arg_list",
            ],
            "Identifier": [
                "args->arg_list",
            ],
            "False": [
                "args->arg_list",
            ],
            "String(String)": [
                "args->arg_list",
            ],
            "Character(char)": [
                "args->arg_list",
            ],
            "RightParen": [
                "args->None",
            ],
            "True": [
                "args->arg_list",
            ],
        },
        "call_stmt": {
            "Identifier": [
                "call_stmt->Identifier LeftParen args RightParen SemiColon",
            ],
        },
        "if_stmt": {
            "If": [
                "if_stmt->If LeftParen expression RightParen compound_stmt else_stmt_n",
            ],
        },
        "var_or_call": {
            "Identifier": [
                "var_or_call->Identifier var_or_call_remain",
            ],
        },
        "statement_list'": {
            "If": [
                "statement_list'->statement statement_list'",
            ],
            "CloseBrace": [
                "statement_list'->None",
            ],
            "While": [
                "statement_list'->statement statement_list'",
            ],
            "Int": [
                "statement_list'->statement statement_list'",
            ],
            "Continue": [
                "statement_list'->statement statement_list'",
            ],
            "Identifier": [
                "statement_list'->statement statement_list'",
            ],
            "Return": [
                "statement_list'->statement statement_list'",
            ],
            "Switch": [
                "statement_list'->statement statement_list'",
            ],
            "Char": [
                "statement_list'->statement statement_list'",
            ],
            "Break": [
                "statement_list'->statement statement_list'",
            ],
            "For": [
                "statement_list'->statement statement_list'",
            ],
            "Default": [
                "statement_list'->None",
            ],
            "Float": [
                "statement_list'->statement statement_list'",
            ],
            "Do": [
                "statement_list'->statement statement_list'",
            ],
            "Case": [
                "statement_list'->None",
            ],
        },
        "statement_list": {
            "For": [
                "statement_list->statement statement_list'",
            ],
            "CloseBrace": [
                "statement_list->None",
            ],
            "Default": [
                "statement_list->None",
            ],
            "Int": [
                "statement_list->statement statement_list'",
            ],
            "Identifier": [
                "statement_list->statement statement_list'",
            ],
            "Float": [
                "statement_list->statement statement_list'",
            ],
            "Case": [
                "statement_list->None",
            ],
            "Break": [
                "statement_list->statement statement_list'",
            ],
            "Do": [
                "statement_list->statement statement_list'",
            ],
            "While": [
                "statement_list->statement statement_list'",
            ],
            "Return": [
                "statement_list->statement statement_list'",
            ],
            "Switch": [
                "statement_list->statement statement_list'",
            ],
            "Char": [
                "statement_list->statement statement_list'",
            ],
            "Continue": [
                "statement_list->statement statement_list'",
            ],
            "If": [
                "statement_list->statement statement_list'",
            ],
        },
        "statement": {
            "Identifier": [
                "statement->var_or_call_stmt SemiColon",
            ],
            "Switch": [
                "statement->switch_stmt",
            ],
            "While": [
                "statement->while_stmt",
            ],
            "If": [
                "statement->if_stmt",
            ],
            "Char": [
                "statement->local_declarations",
            ],
            "For": [
                "statement->for_stmt",
            ],
            "Break": [
                "statement->break_stmt",
            ],
            "Float": [
                "statement->local_declarations",
            ],
            "Do": [
                "statement->do_stmt",
            ],
            "Int": [
                "statement->local_declarations",
            ],
            "Continue": [
                "statement->continue_stmt",
            ],
            "Return": [
                "statement->return_stmt",
            ],
        },
        "continue_stmt": {
            "Continue": [
                "continue_stmt->Continue SemiColon",
            ],
        },
        "case_default_stmt": {
            "Case": [
                "case_default_stmt->case_stmt_n default_stmt",
            ],
        },
        "do_stmt": {
            "Do": [
                "do_stmt->Do compound_stmt While LeftParen expression RightParen SemiColon",
            ],
        },
        "for_expression": {
            "SemiColon": [
                "for_expression->expression_assign SemiColon expression SemiColon expression_assign",
            ],
            "Identifier": [
                "for_expression->expression_assign SemiColon expression SemiColon expression_assign",
            ],
        },
        "add_op": {
            "Minus": [
                "add_op->Minus",
            ],
            "Plus": [
                "add_op->Plus",
            ],
        },
        "compound_stmt": {
            "OpenBrace": [
                "compound_stmt->OpenBrace statement_list CloseBrace",
            ],
        },
        "expression'": {
            "RightParen": [
                "expression'->None",
            ],
            "None": [
                "expression'->None",
            ],
            "Colon": [
                "expression'->None",
            ],
            "Not": [
                "expression'->logical_op additive_expression expression'",
            ],
            "And": [
                "expression'->logical_op additive_expression expression'",
            ],
            "SemiColon": [
                "expression'->None",
            ],
            "Comma": [
                "expression'->None",
            ],
            "Or": [
                "expression'->logical_op additive_expression expression'",
            ],
        },
        "switch_stmt": {
            "Switch": [
                "switch_stmt->Switch LeftParen expression RightParen OpenBrace case_default_stmt CloseBrace",
            ],
        },
        "default_stmt": {
            "Default": [
                "default_stmt->Default Colon statement_list",
            ],
            "CloseBrace": [
                "default_stmt->None",
            ],
        },
        "var_or_call_stmt": {
            "Identifier": [
                "var_or_call_stmt->Identifier var_or_call_stmt_remain",
            ],
        },
        "type": {
            "Char": [
                "type->Char",
            ],
            "Int": [
                "type->Int",
            ],
            "Float": [
                "type->Float",
            ],
        },
        "return_stmt": {
            "Return": [
                "return_stmt->Return expression SemiColon",
            ],
        },
        "break_stmt": {
            "Break": [
                "break_stmt->Break SemiColon",
            ],
        },
        "var'": {
            "EqualsEquals": [
                "var'->None",
            ],
            "Comma": [
                "var'->None",
            ],
            "LessThan": [
                "var'->None",
            ],
            "Minus": [
                "var'->None",
            ],
            "And": [
                "var'->None",
            ],
            "PlusPlus": [
                "var'->None",
            ],
            "BangEquals": [
                "var'->None",
            ],
            "RightParen": [
                "var'->None",
            ],
            "LessThanEquals": [
                "var'->None",
            ],
            "Colon": [
                "var'->None",
            ],
            "GreaterThan": [
                "var'->None",
            ],
            "SemiColon": [
                "var'->None",
            ],
            "Asterisk": [
                "var'->None",
            ],
            "Equals": [
                "var'->None",
            ],
            "GreaterThanEquals": [
                "var'->None",
            ],
            "LeftBracket": [
                "var'->LeftBracket Integer(i64) RightBracket var'",
            ],
            "MinusMinus": [
                "var'->None",
            ],
            "None": [
                "var'->None",
            ],
            "Or": [
                "var'->None",
            ],
            "Not": [
                "var'->None",
            ],
            "Slash": [
                "var'->None",
            ],
            "Plus": [
                "var'->None",
            ],
        },
        "factor": {
            "Identifier": [
                "factor->var_or_call",
            ],
            "String(String)": [
                "factor->value",
            ],
            "False": [
                "factor->value",
            ],
            "Integer(i64)": [
                "factor->value",
            ],
            "FloatNumber(f64)": [
                "factor->value",
            ],
            "LeftParen": [
                "factor->LeftParen expression RightParen",
            ],
            "True": [
                "factor->value",
            ],
            "Character(char)": [
                "factor->value",
            ],
        },
        "var": {
            "Identifier": [
                "var->Identifier var'",
            ],
        },
        "expression": {
            "True": [
                "expression->additive_expression expression'",
            ],
            "Character(char)": [
                "expression->additive_expression expression'",
            ],
            "LeftParen": [
                "expression->additive_expression expression'",
            ],
            "String(String)": [
                "expression->additive_expression expression'",
            ],
            "FloatNumber(f64)": [
                "expression->additive_expression expression'",
            ],
            "Integer(i64)": [
                "expression->additive_expression expression'",
            ],
            "Identifier": [
                "expression->additive_expression expression'",
            ],
            "False": [
                "expression->additive_expression expression'",
            ],
        },
        "dec_stmt": {
            "LeftParen": [
                "dec_stmt->fun_dec_stmt",
            ],
            "Equals": [
                "dec_stmt->var' var_dec_stmt",
            ],
            "SemiColon": [
                "dec_stmt->var' var_dec_stmt",
            ],
            "LeftBracket": [
                "dec_stmt->var' var_dec_stmt",
            ],
        },
        "term'": {
            "RightParen": [
                "term'->None",
            ],
            "GreaterThanEquals": [
                "term'->None",
            ],
            "SemiColon": [
                "term'->None",
            ],
            "Or": [
                "term'->None",
            ],
            "Minus": [
                "term'->None",
            ],
            "And": [
                "term'->None",
            ],
            "EqualsEquals": [
                "term'->None",
            ],
            "Plus": [
                "term'->None",
            ],
            "Asterisk": [
                "term'->mul_op factor term'",
            ],
            "Slash": [
                "term'->mul_op factor term'",
            ],
            "BangEquals": [
                "term'->None",
            ],
            "None": [
                "term'->None",
            ],
            "Colon": [
                "term'->None",
            ],
            "Comma": [
                "term'->None",
            ],
            "LessThan": [
                "term'->None",
            ],
            "LessThanEquals": [
                "term'->None",
            ],
            "GreaterThan": [
                "term'->None",
            ],
            "Not": [
                "term'->None",
            ],
        },
        "declaration_list'": {
            "Char": [
                "declaration_list'->declaration declaration_list'",
            ],
            "$": [
                "declaration_list'->None",
            ],
            "Int": [
                "declaration_list'->declaration declaration_list'",
            ],
            "Float": [
                "declaration_list'->declaration declaration_list'",
            ],
        },
        "param_list": {
            "Int": [
                "param_list->param param_list'",
            ],
            "Char": [
                "param_list->param param_list'",
            ],
            "Float": [
                "param_list->param param_list'",
            ],
        },
    },
}